// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gunawanwijaya/loan-svc/internal/repository/datastore (interfaces: Datastore)
//
// Generated by this command:
//
//	mockgen -destination datastore_mock.go -package datastore . Datastore
//

// Package datastore is a generated GoMock package.
package datastore

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDatastore is a mock of Datastore interface.
type MockDatastore struct {
	ctrl     *gomock.Controller
	recorder *MockDatastoreMockRecorder
	isgomock struct{}
}

// MockDatastoreMockRecorder is the mock recorder for MockDatastore.
type MockDatastoreMockRecorder struct {
	mock *MockDatastore
}

// NewMockDatastore creates a new mock instance.
func NewMockDatastore(ctrl *gomock.Controller) *MockDatastore {
	mock := &MockDatastore{ctrl: ctrl}
	mock.recorder = &MockDatastoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatastore) EXPECT() *MockDatastoreMockRecorder {
	return m.recorder
}

// Mutation mocks base method.
func (m *MockDatastore) Mutation(ctx context.Context, req MutationRequest) (MutationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutation", ctx, req)
	ret0, _ := ret[0].(MutationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mutation indicates an expected call of Mutation.
func (mr *MockDatastoreMockRecorder) Mutation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutation", reflect.TypeOf((*MockDatastore)(nil).Mutation), ctx, req)
}

// Query mocks base method.
func (m *MockDatastore) Query(ctx context.Context, req QueryRequest) (QueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, req)
	ret0, _ := ret[0].(QueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDatastoreMockRecorder) Query(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatastore)(nil).Query), ctx, req)
}
